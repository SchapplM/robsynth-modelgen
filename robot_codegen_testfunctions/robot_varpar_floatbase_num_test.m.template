% Test function for numeric calculations of dynamics
% * Symbolic calculations from maple (..._slag_...)
% * numeric general robotics functions from imes-robotics-toolbox (robot_tree_ ... _nnew...)
% * numeric robot-specific functions from template of this toolbox (%RN%__...nnew_...)
% with floating base model

% %VERSIONINFO%

clc
clear

NQJ = %NQJ%;
NJ = %NJ%;
NL = %NL%;
robot_name = '%RN%';

% Prüfe, ob kinematische Zwangsbedingungen vorliegen.
% Dann entfallen alle folgenden Tests (noch nicht implementiert)
if NJ ~= NQJ
  KINCONSTR = true;
  fprintf('Tests entfallen aufgrund der Existenz kinematischer Zwangsbedingungen\n');
  return
else
  KINCONSTR = false;
end

%% Parameter
TSS = %RN%_varpar_testfunctions_parameter();
for f = fields(TSS)'
  eval(sprintf('%s=TSS.%s;',f{1},f{1}));
end

%% Test gegen numerische Funktionen der Floating Base Dynamik
for i = 1:n
  ob = OB(i,:)';
  qJ = Q(i,:)';
  qJD = QD(i,:)';
  qJDD = QDD(i,:)';
  r_W_W_0 = RB(i,:)';
  V_W_W_0 = VB(i,:)';
  A_W_W_0 = AB(i,:)';
  oDb = OBD(i,:)';
  oDDb = OBDD(i,:)';
  xDB = [V_W_W_0(1:3); oDb];
  xDDB = [A_W_W_0(1:3); oDDb];
  g_world = G(i,:)';
  
  % Gelenk-Transformationsmatrizen in Eingabeformat der Modul-Funktion umwandeln
  T = %RN%_joint_trafo_rotmat_mdh_sym_varpar(qJ, pkin);
  T_stack = NaN(3*NQJ,4);
  for ii = 1:NQJ
      T_stack(3*ii-2:3*ii,:) = T(1:3,:,ii);
  end
  RotAx_i = repmat([0;0;1]', NQJ, 1); % MDH: Drehachse ist immer die z-Achse (des gedrehten Körpers)
    
  % Gravitation
  taugj_sym = %RN%_gravloadJ_floatb_eulangrpy_slag_vp1(qJ, ob, g_world,...
    pkin, m, rSges);
  taugb_sym = %RN%_gravloadB_floatb_eulangrpy_slag_vp1(qJ, ob, g_world,...
    pkin, m, rSges);
  taug_sym = [taugb_sym;taugj_sym];
  taug_num1 = robot_tree_invdyn_floatb_eulangrpy_mdh_nnew_vp1(qJ, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), [-g_world;zeros(3,1)], ...
    alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges, Icges);
  if any( abs(taug_sym-taug_num1) > 1e-10)
    error('Fehler in numerisch berechneter Gravitationslast (Methode 1): Stimmt nicht mit symbolisch berechneter überein.');
  end
  taug_num2 = robot_tree_invdyn_floatb_eulangrpy_nnew_vp1_m(qJ, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), [-g_world;zeros(3,1)], ...
    T_stack, RotAx_i, v, sigma, m, rSges, Icges);
  if any( abs(taug_sym-taug_num2) > 1e-10)
    error('Fehler in numerisch berechneter Gravitationslast (Methode 2): Stimmt nicht mit symbolisch berechneter überein.');
  end
  taug_num3 = robot_tree_gravload_floatb_eulangrpy_mdh_nnew_vp1(qJ, ob, g_world, ...
    alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges);
  if any( abs(taug_sym-taug_num3) > 1e-10)
    error('Fehler in numerisch berechneter Gravitationslast (Methode 3): Stimmt nicht mit symbolisch berechneter überein.');
  end
  taug_num4 = %RN%_invdyn_floatb_eulangrpy_nnew_vp1(qJ, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), [-g_world;zeros(3,1)], ...
    pkin, m, rSges, Icges);
  if any( abs(taug_sym-taug_num4) > 1e-10)
    error('Fehler in numerisch berechneter Gravitationslast (Methode 4): Stimmt nicht mit symbolisch berechneter überein.');
  end
  taug_num5 = %RN%_gravload_floatb_eulangrpy_nnew_vp1(qJ, ob, g_world, ...
    pkin, m, rSges);
  if any( abs(taug_sym-taug_num5) > 1e-10)
    error('Fehler in numerisch berechneter Gravitationslast (Methode 5): Stimmt nicht mit symbolisch berechneter überein.');
  end

  % Coriolis
  cqj_sym = %RN%_coriolisvecJ_floatb_eulangrpy_slag_vp1(qJ, qJD, ob, xDB, ...
    pkin, m, rSges, Icges);
  cqb_sym = %RN%_coriolisvecB_floatb_eulangrpy_slag_vp1(qJ, qJD, ob, xDB, ...
    pkin, m, rSges, Icges);
  tauc_sym = [cqb_sym;cqj_sym];
  tauc_num1 = robot_tree_invdyn_floatb_eulangrpy_mdh_nnew_vp1(qJ, qJD, zeros(NJ,1), ob, xDB, zeros(6,1), ...
    alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges, Icges);
  if any( abs(tauc_sym-tauc_num1) > 1e-10)
    error('Fehler in numerisch berechneter Corioliskraft (Methode 1): Stimmt nicht mit symbolisch berechneter überein.');
  end
  tauc_num2 = robot_tree_invdyn_floatb_eulangrpy_nnew_vp1_m(qJ, qJD, zeros(NJ,1), ob, xDB, zeros(6,1), ...
    T_stack, RotAx_i, v, sigma, m, rSges, Icges);
  if any( abs(tauc_sym-tauc_num2) > 1e-10)
    error('Fehler in numerisch berechneter Corioliskraft (Methode 2): Stimmt nicht mit symbolisch berechneter überein.');
  end
  tauc_num3 = %RN%_invdyn_floatb_eulangrpy_nnew_vp1(qJ, qJD, zeros(NJ,1), ob, xDB, zeros(6,1), ...
    pkin, m, rSges, Icges);
  if any( abs(tauc_sym-tauc_num3) > 1e-10)
    error('Fehler in numerisch berechneter Corioliskraft (Methode 3): Stimmt nicht mit symbolisch berechneter überein.');
  end
  tauc_num4 = robot_tree_coriolisvec_floatb_eulangrpy_mdh_nnew_vp1(qJ, qJD, ob, xDB, ...
    alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges, Icges);
  if any( abs(tauc_sym-tauc_num4) > 1e-10)
    error('Fehler in numerisch berechneter Corioliskraft (Methode 4): Stimmt nicht mit symbolisch berechneter überein.');
  end

  % Massenmatrix
  Mq_sym = %RN%_inertia_floatb_eulangrpy_slag_vp1(qJ, ob, ...
    pkin, m, rSges, Icges);
  Mq_num1 = NaN(6+NJ,6+NJ);
  Mq_num2 = NaN(6+NJ,6+NJ);
  Mq_num3 = NaN(6+NJ,6+NJ);
  I6 = eye(6);
  for jj = 1:6
    Mq_num1(:,jj) = robot_tree_invdyn_floatb_eulangrpy_mdh_nnew_vp1  (qJ, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), I6(:,jj), ...
      alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges, Icges);
    Mq_num2(:,jj) = robot_tree_invdyn_floatb_eulangrpy_nnew_vp1_m    (qJ, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), I6(:,jj), ...
      T_stack, RotAx_i, v,sigma,  m, rSges, Icges);
    Mq_num3(:,jj) = %RN%_invdyn_floatb_eulangrpy_nnew_vp1(qJ, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), I6(:,jj), ...
      pkin, m, rSges, Icges);
  end
  INJ = eye(NJ);
  for jj = 1:NJ
    Mq_num1(:,6+jj) = robot_tree_invdyn_floatb_eulangrpy_mdh_nnew_vp1  (qJ, zeros(NJ,1), INJ(:,jj), ob, zeros(6,1), zeros(6,1) , ...
      alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges, Icges);
    Mq_num2(:,6+jj) = robot_tree_invdyn_floatb_eulangrpy_nnew_vp1_m    (qJ, zeros(NJ,1), INJ(:,jj), ob, zeros(6,1), zeros(6,1) , ...
      T_stack, RotAx_i, v, sigma, m, rSges, Icges);
    Mq_num3(:,6+jj) = %RN%_invdyn_floatb_eulangrpy_nnew_vp1(qJ, zeros(NJ,1), INJ(:,jj), ob, zeros(6,1), zeros(6,1) , ...
      pkin, m, rSges, Icges);
  end
  if any( abs(Mq_num1(:)-Mq_sym(:)) > 1e-10)
    error('Fehler in numerisch berechneter Massenmatrix (Methode 1): Stimmt nicht mit symbolisch berechneter überein.');
  end
  if any( abs(Mq_num2(:)-Mq_sym(:)) > 1e-10)
    error('Fehler in numerisch berechneter Massenmatrix (Methode 2): Stimmt nicht mit symbolisch berechneter überein.');
  end
  if any( abs(Mq_num3(:)-Mq_sym(:)) > 1e-10)
    error('Fehler in numerisch berechneter Massenmatrix (Methode 3): Stimmt nicht mit symbolisch berechneter überein.');
  end
  
  % Inverse Dynamik
  tauqj_sym = %RN%_invdynJ_floatb_eulangrpy_slag_vp1(qJ, qJD, qJDD, ob, xDB, xDDB, g_world, ...
    pkin, m, rSges, Icges);
  tauqb_sym = %RN%_invdynB_floatb_eulangrpy_slag_vp1(qJ, qJD, qJDD, ob, xDB, xDDB, g_world, ...
    pkin, m, rSges, Icges);
  tau_sym = [tauqb_sym;tauqj_sym];
  tau_num1 = robot_tree_invdyn_floatb_eulangrpy_mdh_nnew_vp1(qJ, qJD, qJDD, ob, xDB, xDDB+[-g_world;zeros(3,1)], ...
    alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges, Icges);
  if any( abs(tau_sym-tau_num1) > 1e-10)
    error('Fehler in numerisch berechneter Inverser Dynamik (Methode 1): Stimmt nicht mit symbolisch berechneter überein.');
  end
end
fprintf('Numerische Dynamikfunktionen (Floating Base) gegen symbolische erfolgreich getestet\n');

%% Zeitmessung gegen numerische Funktionen: Gravitation (Floating Base)
% Berechne Gravitationslast mit unterschiedlichen Methoden:
% Symbolisch, numerisch, mit inverser Dynamik und mit Spezialfunktione,
% kompiliert (mex) und normaler Aufruf
matlabfcn2mex({'%RN%_gravloadJ_floatb_eulangrpy_slag_vp1', ...
  '%RN%_gravloadB_floatb_eulangrpy_slag_vp1', ...
  '%RN%_gravloadJ_floatb_eulangrpy_slag_vp2', ...
  '%RN%_gravloadB_floatb_eulangrpy_slag_vp2', ...
  '%RN%_invdyn_floatb_eulangrpy_nnew_vp1', ...
  '%RN%_gravload_floatb_eulangrpy_nnew_vp1'});
n = 2000;
% Berechne Rechenzeiten. Zeile 1: Normale Funktionen. Zeile 2: Kompilierte Fkt (mex)
t_ber_g = NaN(2,6);
tic;
for i = 1:n
  taugj_sym = %RN%_gravloadJ_floatb_eulangrpy_slag_vp1(qJ+i*1e-3, ob, g_world,...
    pkin, m, rSges);
  taugb_sym = %RN%_gravloadB_floatb_eulangrpy_slag_vp1(qJ+i*1e-3, ob, g_world,...
    pkin, m, rSges);
  taug_sym = [taugb_sym;taugj_sym];
end
t_ber_g(1,1) = toc/n;
tic;
for i = 1:n
  taugj_sym = %RN%_gravloadJ_floatb_eulangrpy_slag_vp1_mex(qJ+i*1e-3, ob, g_world,...
    pkin, m, rSges);
  taugb_sym = %RN%_gravloadB_floatb_eulangrpy_slag_vp1_mex(qJ+i*1e-3, ob, g_world,...
    pkin, m, rSges);
  taug_sym = [taugb_sym;taugj_sym];
end
t_ber_g(2,1) = toc/n;
tic;
for i = 1:n
  taugj_sym = %RN%_gravloadJ_floatb_eulangrpy_slag_vp2(qJ+i*1e-3, ob, g_world,...
    pkin, m, mrSges);
  taugb_sym = %RN%_gravloadB_floatb_eulangrpy_slag_vp2(qJ+i*1e-3, ob, g_world,...
    pkin, m, mrSges);
  taug_sym = [taugb_sym;taugj_sym];
end
t_ber_g(1,2) = toc/n;
tic;
for i = 1:n
  taugj_sym = %RN%_gravloadJ_floatb_eulangrpy_slag_vp2_mex(qJ+i*1e-3, ob, g_world,...
    pkin, m, mrSges);
  taugb_sym = %RN%_gravloadB_floatb_eulangrpy_slag_vp2_mex(qJ+i*1e-3, ob, g_world,...
    pkin, m, mrSges);
  taug_sym = [taugb_sym;taugj_sym];
end
t_ber_g(2,2) = toc/n;
tic;
for i = 1:n
  taug_num1 = robot_tree_invdyn_floatb_eulangrpy_mdh_nnew_vp1(qJ+i*1e-3, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), [-g_world;zeros(3,1)], ...
    alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges, Icges);
end
t_ber_g(1,3) = toc/n;
tic;
for i = 1:n
  taug_num2 = robot_tree_gravload_floatb_eulangrpy_mdh_nnew_vp1(qJ+i*1e-3, ob, g_world, ...
    alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges);
end
t_ber_g(1,4) = toc/n;
tic;
for i = 1:n
  taug_num3 = %RN%_invdyn_floatb_eulangrpy_nnew_vp1(qJ+i*1e-3, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), [-g_world;zeros(3,1)], ...
    pkin, m, rSges, Icges);
end
t_ber_g(1,5) = toc/n;
tic;
for i = 1:n
  taug_num3 = %RN%_invdyn_floatb_eulangrpy_nnew_vp1_mex(qJ+i*1e-3, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), [-g_world;zeros(3,1)], ...
    pkin, m, rSges, Icges);
end
t_ber_g(2,5) = toc/n;
tic;
for i = 1:n
  taug_num4 = %RN%_gravload_floatb_eulangrpy_nnew_vp1(qJ+i*1e-3, ob, g_world, ...
    pkin, m, rSges);
end
t_ber_g(1,6) = toc/n;
tic;
for i = 1:n
  taug_num4 = %RN%_gravload_floatb_eulangrpy_nnew_vp1_mex(qJ+i*1e-3, ob, g_world, ...
    pkin, m, rSges);
end
t_ber_g(2,6) = toc/n;

figure(1);clf;
set(1, 'Name', 'Floatb_ComputationTime_Comparison');
subplot(2,4,sprc2no(2,4,1,1));
bar(t_ber_g(1,:)*1e3); 
set(gca, 'xticklabel', {'s1/gl','s2/gl','n/id/allg','n/gl/allg','n/id','n/gl'});
ylabel('t [ms]'); title('gravload');
subplot(2,4,sprc2no(2,4,2,1));
bar(t_ber_g(2,:)*1e3); 
set(gca, 'xticklabel', {'s1/gl','s2/gl','n/id/allg','n/gl/allg','n/id','n/gl'});
ylabel('t [ms]'); title('gravload (mex)');

%% Zeitmessung gegen numerische Funktionen: Coriolisvektor (Floating Base)
% Berechne Gravitationslast mit unterschiedlichen Methoden:
% Symbolisch, numerisch, mit inverser Dynamik und mit Spezialfunktione,
% kompiliert (mex) und normaler Aufruf
matlabfcn2mex({'%RN%_coriolisvecJ_floatb_eulangrpy_slag_vp1', ...
  '%RN%_coriolisvecB_floatb_eulangrpy_slag_vp1', ...
  '%RN%_coriolisvecJ_floatb_eulangrpy_slag_vp2', ...
  '%RN%_coriolisvecB_floatb_eulangrpy_slag_vp2', ...
  '%RN%_invdyn_floatb_eulangrpy_nnew_vp1'});
n = 2000;

t_ber_c = NaN(2,4);
tic;
for i = 1:n
  taucj_sym = %RN%_coriolisvecJ_floatb_eulangrpy_slag_vp1(qJ+i*1e-3, qJD, ob, xDB,...
    pkin, m, rSges, Icges);
  taucb_sym = %RN%_coriolisvecB_floatb_eulangrpy_slag_vp1(qJ+i*1e-3, qJD, ob, xDB,...
    pkin, m, rSges, Icges);
  tauc_sym = [taucb_sym;taucj_sym];
end
t_ber_c(1,1) = toc/n;
tic;
for i = 1:n
  taucj_sym = %RN%_coriolisvecJ_floatb_eulangrpy_slag_vp1_mex(qJ+i*1e-3, qJD, ob, xDB,...
    pkin, m, rSges, Icges);
  taucb_sym = %RN%_coriolisvecB_floatb_eulangrpy_slag_vp1_mex(qJ+i*1e-3, qJD, ob, xDB,...
    pkin, m, rSges, Icges);
  tauc_sym = [taucb_sym;taucj_sym];
end
t_ber_c(2,1) = toc/n;
tic;
for i = 1:n
  taucj_sym = %RN%_coriolisvecJ_floatb_eulangrpy_slag_vp2(qJ+i*1e-3, qJD, ob, xDB,...
    pkin, m, mrSges, Ifges);
  taucb_sym = %RN%_coriolisvecB_floatb_eulangrpy_slag_vp2(qJ+i*1e-3, qJD, ob, xDB,...
    pkin, m, mrSges, Ifges);
  tauc_sym = [taucb_sym;taucj_sym];
end
t_ber_c(1,2) = toc/n;
tic;
for i = 1:n
  taucj_sym = %RN%_coriolisvecJ_floatb_eulangrpy_slag_vp2_mex(qJ+i*1e-3, qJD, ob, xDB,...
    pkin, m, mrSges, Ifges);
  taucb_sym = %RN%_coriolisvecB_floatb_eulangrpy_slag_vp2_mex(qJ+i*1e-3, qJD, ob, xDB,...
    pkin, m, mrSges, Ifges);
  tauc_sym = [taucb_sym;taucj_sym];
end
t_ber_c(2,2) = toc/n;
tic;
for i = 1:n
  tauc_num1 = robot_tree_invdyn_floatb_eulangrpy_mdh_nnew_vp1(qJ+i*1e-3, qJD, zeros(NJ,1), ob, xDB,zeros(6,1), ...
    alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges, Icges);
end
t_ber_c(1,3) = toc/n;
tic;
for i = 1:n
  tauc_num2 = %RN%_invdyn_floatb_eulangrpy_nnew_vp1(qJ+i*1e-3, qJD, zeros(NJ,1), ob, xDB, zeros(6,1), ...
    pkin, m, rSges, Icges);
end
t_ber_c(1,4) = toc/n;
tic;
for i = 1:n
  tauc_num3 = %RN%_invdyn_floatb_eulangrpy_nnew_vp1_mex(qJ+i*1e-3, qJD, zeros(NJ,1), ob, xDB, zeros(6,1), ...
    pkin, m, rSges, Icges);
end
t_ber_c(2,4) = toc/n;

subplot(2,4,sprc2no(2,4,1,2));
bar(t_ber_c(1,:)*1e3); 
set(gca, 'xticklabel', {'s1/cv','s2/cv','n/id/allg','n/id'});
ylabel('t [ms]'); title('coriolisvec');
subplot(2,4,sprc2no(2,4,2,2));
bar(t_ber_c(2,:)*1e3); 
set(gca, 'xticklabel', {'s1/cv','s2/cv','n/id/allg','n/id'});
ylabel('t [ms]'); title('coriolisvec (mex)');

%% Zeitmessung gegen numerische Funktionen: Massenmatrix (Floating Base)
% Berechne Gravitationslast mit unterschiedlichen Methoden:
% Symbolisch, numerisch, mit inverser Dynamik und mit Spezialfunktione,
% kompiliert (mex) und normaler Aufruf
matlabfcn2mex({'%RN%_inertia_floatb_eulangrpy_slag_vp1', ...
  '%RN%_inertia_floatb_eulangrpy_slag_vp2', ...
  '%RN%_invdyn_floatb_eulangrpy_nnew_vp1'});
n = 200;
t_ber_M = NaN(2,4);
tic;
for i = 1:n
  Mq_sym = %RN%_inertia_floatb_eulangrpy_slag_vp1(qJ+1e-3*i, ob, ...
    pkin, m, rSges, Icges);
end
t_ber_M(1,1) = toc/n;
tic;
for i = 1:n
  Mq_sym = %RN%_inertia_floatb_eulangrpy_slag_vp1_mex(qJ+1e-3*i, ob, ...
    pkin, m, rSges, Icges);
end
t_ber_M(2,1) = toc/n;
tic
for i = 1:n
  Mq_sym = %RN%_inertia_floatb_eulangrpy_slag_vp2(qJ+1e-3*i, ob, ...
    pkin, m, mrSges, Ifges);
end
t_ber_M(1,2) = toc/n;
tic;
for i = 1:n
  Mq_sym = %RN%_inertia_floatb_eulangrpy_slag_vp2_mex(qJ+1e-3*i, ob, ...
    pkin, m, mrSges, Ifges);
end
t_ber_M(2,2) = toc/n;
tic
for i = 1:n
  Mq_num1 = NaN(6+NJ,6+NJ);
  I6 = eye(6);
  for jj = 1:6
    Mq_num1(:,jj) = robot_tree_invdyn_floatb_eulangrpy_mdh_nnew_vp1  (qJ+1e-3*i, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), I6(:,jj), ...
      alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges, Icges);
  end
  INJ = eye(NJ);
  for jj = 1:NJ
    Mq_num1(:,6+jj) = robot_tree_invdyn_floatb_eulangrpy_mdh_nnew_vp1  (qJ+1e-3*i, zeros(NJ,1), INJ(:,jj), ob, zeros(6,1), zeros(6,1) , ...
      alpha, a, d, theta, q_offset, b, beta, v, sigma, m, rSges, Icges);
  end
end
t_ber_M(1,3) = toc/n;
tic
for i = 1:50
  Mq_num2 = NaN(6+NJ,6+NJ);
  I6 = eye(6);
  for jj = 1:6
    Mq_num2(:,jj) = %RN%_invdyn_floatb_eulangrpy_nnew_vp1(qJ+1e-3*i, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), I6(:,jj), ...
      pkin, m, rSges, Icges);
  end
  INJ = eye(NJ);
  for jj = 1:NJ
    Mq_num2(:,6+jj) = %RN%_invdyn_floatb_eulangrpy_nnew_vp1(qJ+1e-3*i, zeros(NJ,1), INJ(:,jj), ob, zeros(6,1), zeros(6,1) , ...
      pkin, m, rSges, Icges);
  end
end
t_ber_M(1,4) = toc/50;
tic
for i = 1:n
  Mq_num2 = NaN(6+NJ,6+NJ);
  I6 = eye(6);
  for jj = 1:6
    Mq_num2(:,jj) = %RN%_invdyn_floatb_eulangrpy_nnew_vp1_mex(qJ+1e-3*i, zeros(NJ,1), zeros(NJ,1), ob, zeros(6,1), I6(:,jj), ...
      pkin, m, rSges, Icges);
  end
  INJ = eye(NJ);
  for jj = 1:NJ
    Mq_num2(:,6+jj) = %RN%_invdyn_floatb_eulangrpy_nnew_vp1_mex(qJ+1e-3*i, zeros(NJ,1), INJ(:,jj), ob, zeros(6,1), zeros(6,1) , ...
      pkin, m, rSges, Icges);
  end
end
t_ber_M(2,4) = toc/n;

subplot(2,4,sprc2no(2,4,1,3));
bar(t_ber_M(1,:)*1e3); 
set(gca, 'xticklabel', {'s1/M','s2/M','n/id/allg', 'n/id'});
ylabel('t [ms]'); title('inertia');
subplot(2,4,sprc2no(2,4,2,3));
bar(t_ber_M(2,:)*1e3); 
set(gca, 'xticklabel', {'s1/M','s2/M','n/id/allg', 'n/id'});
ylabel('t [ms]'); title('inertia (mex)');
%% Rechenzeit: Vorwärtsdynamik (Floating Base)
% Getrennte Betrachtung der inversen Dynamik, da bei numerischer Berechnung
% Coriolis- und Gravitationsmoment zusammen berechnet werden können
t_ber_fdyn = NaN(2,3);
% Alternative 1: Alles symbolisch und kompiliert
t_ber_fdyn(2,1) = t_ber_g(2,1) + t_ber_c(2,2) + t_ber_M(2,1);
% Alternative 2: Nur Coriolisvektor numerisch, alles andere symbolisch und
% kompiliert
t_ber_fdyn(2,2) = t_ber_g(2,1) + t_ber_c(2,4) + t_ber_M(2,1);
% Alternative 3: Gravitation und Coriolis in einem numerischen
% Funktionsaufruf, Massenmatrix symbolisch
t_ber_fdyn(2,3) =  t_ber_c(2,4) + t_ber_M(2,1);

subplot(2,4,sprc2no(2,4,2,4));
bar(t_ber_fdyn(2,:)*1e3); 
set(gca, 'xticklabel', {'s/s/s', 's/n/s', 'n/s'});
ylabel('t [ms]'); title('fdyn (mex)');


