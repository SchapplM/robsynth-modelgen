% Teste parameterlineare Formen der Dynamik

% Moritz Schappler, schappler@irt.uni-hannover.de, 2016-03
% (c) Institut für Regelungstechnik, Universität Hannover

clc
clear

NJ = %NJ%;
robot_name = '%RN%';

testfunctions_path_init

%% Parameter
%RN%_varpar_testfunctions_parameter

MPV = %RN%_convert_par2_MPV(alpha, a, d, q_offset, b, beta, ...
  m, mrSges, Ifges);
%% Test kinetic Energy
for i = 1:n
  q = Q(i,:)';
  qD = QD(i,:)';
  % calculate kinetic energy with optimized function
  T_func = %RN%_energykin_fixb_slag_vp1(q, qD, ...
    alpha, a, d, q_offset, b, beta, m, rSges, Icges);
  % calculate kinetic energy with regressor
  t_reg = %RN%_energykin_fixb_regmin_slag_vp(q, qD, ...
    alpha, a, d, q_offset, b, beta);
  T_mpv = t_reg*MPV;
  if abs(T_mpv-T_func) > 1e-12
    error('Kinetic Energy from base parameter vector does not match with direct form.');
  end
end
fprintf('Tested kinetic energy for %d random joint angles for %s\n', ...
  n, robot_name);
%% Test Potential Energy
% Die potentielle Energie hat aufgrund des wegstreichens von Parametern
% einen unterschiedlichen statischen Anteil bei der Minimalparameterform
for i = 1:n
  q = Q(i,:)';
  g_base = G(i,:)';
  % calculate potential energy with optimized function
  U_func = %RN%_energypot_fixb_slag_vp1(q, g_base, ...
    alpha, a, d, q_offset, b, beta, m, rSges);
  U_func0 = %RN%_energypot_fixb_slag_vp1(zeros(NJ,1), g_base, ...
    alpha, a, d, q_offset, b, beta, m, rSges);
  % calculate potential energy with regressor
  u_reg = %RN%_energypot_fixb_regmin_slag_vp(q, g_base, ...
    alpha, a, d, q_offset, b, beta);
  u_reg0 = %RN%_energypot_fixb_regmin_slag_vp(zeros(NJ,1), g_base, ...
    alpha, a, d, q_offset, b, beta);
  U_mpv = u_reg*MPV;
  U_mpv0 = u_reg0*MPV;
  if abs((U_mpv-U_mpv0)-(U_func-U_func0)) > 1e-12
    error('Potential Energy from base parameter vector does not match with direct form.');
  end
end
fprintf('Tested potential energy for %d random joint angles for %s\n', ...
  n, robot_name);

%% Test Gravitational Load
for i = 1:n
  q = Q(i,:)';
  g_base = G(i,:)';
  % calculate gravitational load with optimized function
  taug_func = %RN%_gravload_joint_floatb_twist_slag_vp1(q, g_base, ...
    alpha, a, d, q_offset, b, beta, m, rSges);
  % calculate gravitational load with regressor
  taug_reg = %RN%_gravload_joint_regmin_slag_vp(q, g_base, ...
    alpha, a, d, q_offset, b, beta);
  taug_mpv = taug_reg*MPV;
  if abs(taug_mpv-taug_func) > 1e-12
    error('Gravitation joint torque from base parameter vector does not match with direct form.');
  end
end
fprintf('Tested gravitation joint torque for %d random joint angles for %s\n', ...
  n, robot_name);

%% Teste Coriolis-Vektor
for i = 1:n
  q = Q(i,:)';
  qD = QD(i,:)';
  % calculate coriolis torques with optimized function
  tauc_func = %RN%_coriolisvec_joint_fixb_slag_vp1(q, qD, ...
    alpha, a, d, q_offset, b, beta, m, rSges, Icges);
  % calculate coriolis torques with regressor
  tauc_reg = %RN%_coriolisvec_joint_fixb_regmin_slag_vp(q, qD, ...
    alpha, a, d, q_offset, b, beta);
  tauc_mpv = tauc_reg*MPV;
  if abs(tauc_mpv-tauc_func) > 1e-12
    error('Coriolis joint torque from base parameter vector does not match with direct form.');
  end
end
fprintf('Tested Coriolis joint torque for %d random joint angles for %s\n', ...
  n, robot_name);

%% Teste Coriolis-Matrix
for i = 1:n
  q = Q(i,:)';
  qD = QD(i,:)';
  % calculate Coriolis-Matrix with optimized function
  Cq_func = %RN%_coriolismat_joint_fixb_slag_vp1(q, qD, ...
    alpha, a, d, q_offset, b, beta, m, rSges, Icges);
  % calculate Coriolis-Matrix with regressor
  Cq_reg = %RN%_coriolismat_joint_fixb_regmin_slag_vp(q, qD, ...
    alpha, a, d, q_offset, b, beta);
  Cq_mpv_vec = Cq_reg*MPV;
  Cq_mpv = vec2symmat(Cq_mpv_vec);
  if abs(Cq_func(:)-Cq_mpv(:)) > 1e-12
    error('Coriolis matrix from base parameter vector does not match with direct form.');
  end
end
fprintf('Tested Coriolis matrix for %d random joint angles for %s\n', ...
  n, robot_name);

%% Teste Massenmatrix
for i = 1:n
  q = Q(i,:)';
  % calculate inertia with optimized function
  Mq_func = %RN%_inertia_joint_slag_vp1(q, ...
    alpha, a, d, q_offset, b, beta, m, rSges, Icges);
  % calculate inertia with regressor
  Mq_reg = %RN%_inertia_joint_regmin_slag_vp(q, ...
    alpha, a, d, q_offset, b, beta);
  Mq_mpv_vec = Mq_reg*MPV;
  Mq_mpv = vec2symmat(Mq_mpv_vec);
  if abs(Mq_func(:)-Mq_mpv(:)) > 1e-12
    error('Joint inertia matrix from base parameter vector does not match with direct form.');
  end
end
fprintf('Tested Joint inertia matrix for %d random joint angles for %s\n', ...
  n, robot_name);

%% Teste Massenmatrix-Zeitableitung
for i = 1:n
  q = Q(i,:)';
  qD = QD(i,:)';
  % calculate inertia time derivative with optimized function
  MqD_func = %RN%_inertiaD_joint_slag_vp1(q, qD, ...
    alpha, a, d, q_offset, b, beta, m, rSges, Icges);
  % calculate inertia time derivative with regressor
  MqD_reg = %RN%_inertiaD_joint_regmin_slag_vp(q, qD, ...
    alpha, a, d, q_offset, b, beta);
  MqD_mpv_vec = MqD_reg*MPV;
  MqD_mpv = vec2symmat(MqD_mpv_vec);
  if abs(MqD_func(:)-MqD_mpv(:)) > 1e-12
    error('Joint inertia matrix time derivative from base parameter vector does not match with direct form.');
  end
end
fprintf('Tested Joint inertia matrix time derivative for %d random joint angles for %s\n', ...
  n, robot_name);


%% Teste inverse Dynamik
for i = 1:n
  q = Q(i,:)';
  qD = QD(i,:)';
  qDD = QDD(i,:)';
  g_base = G(i,:)';
  % calculate inverse dynamics with optimized function
  tau_func = %RN%_invdyn_joint_floatb_twist_slag_vp1(q, qD, qDD, zeros(6,1), zeros(6,1), g_base, ...
    alpha, a, d, q_offset, b, beta, m, rSges, Icges);
  % calculate inverse dynamics with regressor
  tau_reg = %RN%_invdyn_joint_fixb_regmin_slag_vp(q, qD, qDD, g_base, ...
    alpha, a, d, q_offset, b, beta);
  tau_mpv = tau_reg*MPV;
  if abs(tau_func-tau_mpv) > 1e-12
    error('Inverse dynamics from base parameter vector does not match with direct form.');
  end
end
fprintf('Tested inverse dynamics for %d random joint angles for %s\n', ...
  n, robot_name);

