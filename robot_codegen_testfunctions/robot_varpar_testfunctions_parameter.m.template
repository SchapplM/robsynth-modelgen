% Einstellungen für Modultests von %RN% generieren:
% Enthält Definitionen für Parameter und zufällige Konfigurationen
%
% Ausgabe:
% TSS
%   Struktur mit Einstellungen für die Modultests

% %VERSIONINFO%

% Moritz Schappler, schappler@irt.uni-hannover.de, 2016-03
% (C) Institut für Regelungstechnik, Universität Hannover

function TSS = %RN%_varpar_testfunctions_parameter()

%% General Definitions
NQJ = %NQJ%; % Number of generalized coordinates
NJ = %NJ%; % number of joints (number of rows in Denavit-Hartenberg table)
NL = %NL%; % number of links (rigid bodies, including the base)
robot_name = '%RN%'; % prefix in all function names and simulink models and blocks

%% Kinematik-Parameter definieren
% These parameters may be overwritten down in this script
a = rand(NJ,1); % Kinematic length of MDH notation
alpha = zeros(NJ,1); % Kinematic angle of MDH notation
d = rand(NJ,1); % Kinematic length of MDH notation
q_offset = zeros(NJ,1); % Kinematic angle of MDH notation
b = zeros(NJ,1); % Kinematic length of MDH notation
beta = zeros(NJ,1); % Kinematic angle of MDH notation

%% Zufällige Roboterkonfigurationen
% Werden in den Testfunktionen benutzt

n = 100;
% Gelenkwinkel und -zeitableitungen
%REPLACE_QDEF%
Q = repmat(q_min',n,1) + rand(n,NQJ).*repmat(q_max'-q_min',n,1);
QD = (0.5-rand(n, NQJ))*pi;
QD(1:NQJ,:)=eye(NQJ);
QDD = (0.5-rand(n, NQJ))*pi;

% Gravitation
G = (0.5-rand(n, 3))*10;
G(:,~[%GVEC%]) = 0;

% Basisposition
RB = (0.5-rand(n, 3))*10;

% Basisorientierung
% Zufällige Zeitableitung der Orientierungsdarstellung und ihrer
% Ableitungen
OB = (0.5-rand(n, 3))*pi;
OB(1,:) = 0;
OBD = (0.5-rand(n, 3))*pi;
OBDD = (0.5-rand(n, 3))*pi;

% Winkelgeschwindigkeit und Beschleunigung aus der Orientierungsdarstellung
% berechnen
VB = NaN(n,6);
AB = NaN(n,6);
VB(:,1:3) = (0.5-rand(n, 3))*10;
AB(:,1:3) = (0.5-rand(n, 3))*10;
for i = 1:n
  % Darstellung umwandeln.
  % TODO: Mit Transformationsmatrizen
  VB(i, 4:6) = eulxyzD2omega(OB(i,:)', OBD(i,:)');
  AB(i, 4:6) = eulxyzDD2omegaD(OB(i,:)', OBD(i,:)', OBDD(i,:)');
  
  % Probe:
  T_basevel = eulxyzjac(OB(i,:)');
  obd_test = T_basevel \ VB(i, 4:6)';
  
  if any(abs(obd_test-OBD(i,:)') > 1e-10)
    error('Orientierung und Basisgeschwindigkeit stimmen nicht überein');
  end
end


