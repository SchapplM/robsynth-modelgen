% Test function for kinematics from symbolic calculations
% with floating base model

% Moritz Schappler, schappler@irt.uni-hannover.de, 2016-04
% (C) Institut für Regelungstechnik, Universität Hannover

clc
clear

NQJ = %NQJ%;
NJ = %NJ%;
NL = %NL%;
robot_name = '%RN%';

%% Parameter
%RN%_varpar_testfunctions_parameter

%% Fixed Base und Floating Base Kinematik testen
for i = 1:n
  ob = OB(i,:);
  q = Q(i,:)';

  T_c_fixb = %RN%_fkine_fixb_rotmat_mdh_sym_varpar(q, ...
    pkin);
  T_c_floatb_xyz = %RN%_fkine_floatb_eulangrpy_rotmat_mdh_sym_varpar(q, zeros(3,1), zeros(3,1), ...
    pkin);

  for j = 1:size(T_c_fixb, 3)
    T_Diff = T_c_fixb(:,:,j) / T_c_floatb_xyz(:,:,j);
    Delta = T_Diff-eye(4);
    if any(abs(Delta(:)) > 1e-6)
      error('Forward Kinematics does not match between floating and fixed base');
    end
  end
end

fprintf('Tested %d configurations for fixed base forward kinematics.\n', n);

%% Symbolisch generierte Jacobi-Matrix gegen numerisch berechnete Funktion
if any(sigma)
  fprintf('Schubgelenke noch nicht implementiert. Überspringe Test.\n');
else
for i = 1:n
  for jj = 1:NL
    ob = OB(i,:)';
    qJ = Q(i,:)';
    r_i_i_C = rand(3,1);
    Jg_num = %RN%_jacobig_mdh_eulangrpy_num(ob, qJ, uint8(jj), r_i_i_C, pkin, v);
    Jg_sym = %RN%_jacobig_mdh_eulangrpy_sym(ob, qJ, uint8(jj), r_i_i_C, pkin);
    test = Jg_num-Jg_sym;
    if any(abs(test(:)) > 1e-6)
      error('Jacobian does not match between sym and num');
    end
  end
end
end
fprintf('Tested %d configurations for floating base Jacobians: sym vs. num.\n', n);
