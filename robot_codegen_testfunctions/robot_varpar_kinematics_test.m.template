% Test function for kinematics from symbolic calculations
% with floating base model

% Moritz Schappler, schappler@irt.uni-hannover.de, 2016-04
% (c) Institut für Regelungstechnik, Universität Hannover

clc
clear

NQJ = %NQJ%;
NJ = %NJ%;
NL = %NL%;
robot_name = '%RN%';

testfunctions_path_init

%% Parameter
%RN%_varpar_testfunctions_parameter

%% Fixed Base und Floating Base Kinematik testen
for i = 1:n
  ob = OB(i,:);
  q = Q(i,:)';

  T_c_fixb = %RN%_fkine_fixb_rotmat_mdh_sym_varpar(q, ...
    alpha, a, d, q_offset, b, beta%KCPARG%);
  T_c_floatb_xyz = %RN%_fkine_floatb_eulangrpy_rotmat_mdh_sym_varpar(q, zeros(3,1), zeros(3,1), ...
    alpha, a, d, q_offset, b, beta%KCPARG%);

  for j = 1:size(T_c_fixb, 3)
    T_Diff = T_c_fixb(:,:,j) / T_c_floatb_xyz(:,:,j);
    Delta = T_Diff-eye(4);
    if any(abs(Delta(:)) > 1e-6)
      error('Forward Kinematics does not match between floating and fixed base');
    end
  end
end

fprintf('Tested %d configurations for fixed base forward kinematics.\n', n);

%% Kinematik gegen Jacobi-Matrix testen (fixed base)

for i = 1:size(Q, 1)
  for j  = 1:NJ % incremental change of joint angle j
    q = Q(i,:)';

    % differential kinematics from forward dynamics
    E = eye(NJ);
    qDelta = 1e-10*E(:,j);
    Tc_1 = %RN%_fkine_fixb_rotmat_mdh_sym_varpar(q, ...
      alpha, a, d, q_offset, b, beta);
    Tc_2 = %RN%_fkine_fixb_rotmat_mdh_sym_varpar(q+qDelta, ...
      alpha, a, d, q_offset, b, beta);
    xDelta_fkine = Tc_2(1:3,4,end) - Tc_1(1:3,4,end);

    % differential kinematics from Jacobian function
    JG = %RN%_jacobig_mdh_num(q, uint8(NJ+1), zeros(3,1), ...
      alpha, a, d, q_offset, b, beta, v%KCPARG%);
    xDelta_jacob = JG*qDelta;

    x1_fkine = Tc_1(1:3,4,end);
    x2_fkine = Tc_2(1:3,4,end);
    x2_jacob = x1_fkine + xDelta_jacob(1:3);

    % calculate error
    Error_cart = x2_fkine(1:3) - x2_jacob(1:3);
    if any(abs(Error_cart) > 10*eps)
      error('Jacobian does not match with forward kinematics. Error = [%s]. Atlas v%d, %s arm, Deltaq%d', ...
        dispparam(Error_cart', '%.5e'), j);
    end

  end
end
fprintf('Tested Jacobian (fixed base) against forward kinematics for %d random joint angles.\n', ...
	size(Q, 1));
 

%% Test Time Derivate of Jacobian
Mex_Erstellen({'%RN%_jacobig_mdh_num', '%RN%_jacobigD_mdh_num'});
for kk = 1:NJ % Test for linear joint trajectory
  n = 1e5; % little steps -> small error
  Q = zeros(n,NJ);
  q_kk_start = -pi/2;
  q_kk_end = pi/2;
  Q(:,kk) = linspace(q_kk_start, q_kk_end, n);
  QD = zeros(n,NJ);
  T = 1;
  QD(:,kk) = (q_kk_end-q_kk_start)/T; % linear velocity profile
  dT = T/n;
  JG = zeros(6,NJ);

  t1 = tic;
  for i = 1:n % Test Difference for each trajectory point
    JG_vorher = JG;
    q = Q(i,:)';
    qD = QD(i,:)';     
    % calculate jacobian time derivate with two methods
    JG = %RN%_jacobig_mdh_num_mex(q, uint8(NJ+1), zeros(3,1), ...
      alpha, a, d, q_offset, b, beta, v);
    JGD_num1 = (JG - JG_vorher) / dT;
    JGD_num2 =  %RN%_jacobigD_mdh_num_mex(q, qD, uint8(NJ+1), zeros(3,1), ...
      alpha, a, d, q_offset, b, beta, v);

    % calculate error
    if i > 2
      JGD_Diff = JGD_num1 - JGD_num2;
      I = abs(JGD_Diff) > 1e-4;
      if any(I(:))
        disp('from numeric differentiation:');
        disp(JGD_num1);
        disp('from direct formula:');
        disp(JGD_num2);          
        error('Zeitableitungen der Jacobi-Matrizen weichen voneinander ab!');
      end
    end

  end
  fprintf('Erfolgreiche Übereinstimmung von JGD für Trajektorie aus %d Gelenkwinkeln für Achse %d. Rechenzeit: %1.0fs\n', ...
    n, kk, toc(t1));
end
fprintf('Tested Jacobian Time derivative for fixed base.\n');

