simplify2 := proc (Term)
  # Simplify a term. Additionally check if the simplification is advantageous.
  # In some cases the term gets longer after the simplification. Then discard.
  # Give the local procedure variable a long name. They must not be identical in Term.
  # see also: https://www.mapleprimes.com/questions/229401-Prevent-Procedure-From-Accessing-global
  local simplify_tmpvar_c1, simplify_tmpvar_c1sum, simplify_tmpvar_c2, simplify_tmpvar_c2sum, simplify_tmpvar_weighting, Term2:
  # Get computational effort before simplification
  simplify_tmpvar_weighting := [':-functions'=1,':-additions'=1, ':-multiplications'=1,':-divisions'=1,':-subscripts'=0];
  simplify_tmpvar_c1 := add(codegen:-cost~(Term)): 
  simplify_tmpvar_c1sum := eval(simplify_tmpvar_c1, simplify_tmpvar_weighting):
  # Perform simplification. Attention: tries to use global variables to simplify the expression
  Term2 := simplify(Term):
  # Get effort after simplification
  simplify_tmpvar_c2 := add(codegen:-cost~(Term2)): 
  simplify_tmpvar_c2sum := eval(simplify_tmpvar_c2, simplify_tmpvar_weighting):
  if simplify_tmpvar_c2sum > simplify_tmpvar_c1sum then
    # The simplification was not successful. Take old version.
    Term2 := Term:
  end if:
  return Term2:
end proc:
