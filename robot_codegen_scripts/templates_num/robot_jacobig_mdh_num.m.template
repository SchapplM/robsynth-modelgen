% Gelenk-Jacobimatrix zu beliebigen Punkten eines Körpers für 
% %NJ%
% 
% Input:
% qJ [1x%NJ%]
%   Joint Angles [rad]
% r_i_i_C [1x3]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in %RN%_fkine_fixb_rotmat_mdh_sym_varpar.m
% 
% Output:
% Jg_C [6x%NJ%]
%   geometric body jacobian for the defined point
% 
% Quellen:
% [1] Ortmaier: Robotik I Skript

% Moritz Schappler, schappler@irt.uni-hannover.de, 2016-03
% (c) Institut für Regelungstechnik, Leibniz Universität Hannover

function Jg_C = %FN%(qJ, link_index, r_i_i_C, ...
  alpha_mdh, a_mdh, d_mdh, q_offset_mdh, b_mdh, beta_mdh, v_mdh)
%% Init
%#codegen
assert(isa(qJ,'double') && isreal(qJ) && all(size(qJ) == [%NJ% 1]), ...
  '%FN%: Joint angles qJ have to be [%NJ%x1] double');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
  '%FN%: link_index has to be [1x1] uint8');
assert(isa(r_i_i_C,'double') && isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
  '%FN%: Position vector r_i_i_C has to be [3x1] double');
assert(isa(alpha_mdh,'double') && isreal(alpha_mdh) && all(size(alpha_mdh) == [%NJ% 1]), ...
  '%FN%: alpha_mdh has to be [%NJ%x1] double');
assert(isa(a_mdh,'double') && isreal(a_mdh) && all(size(a_mdh) == [%NJ% 1]), ...
  '%FN%: a_mdh has to be [%NJ%x1] double');
assert(isa(d_mdh,'double') && isreal(d_mdh) && all(size(d_mdh) == [%NJ% 1]), ...
  '%FN%: d_mdh has to be [%NJ%x1] double');
assert(isa(q_offset_mdh,'double') && isreal(q_offset_mdh) && all(size(q_offset_mdh) == [%NJ% 1]), ...
  '%FN%: q_offset_mdh has to be [%NJ%x1] double');
assert(isa(b_mdh,'double') && isreal(b_mdh) && all(size(b_mdh) == [%NJ% 1]), ...
  '%FN%: b_mdh has to be [%NJ%x1] double');
assert(isa(beta_mdh,'double') && isreal(beta_mdh) && all(size(beta_mdh) == [%NJ% 1]), ...
  '%FN%: beta_mdh has to be [%NJ%x1] double'); 
assert(isa(v_mdh,'uint8') && all(size(v_mdh) == [%NJ% 1]), ...
  '%FN%: v_mdh has to be [%NJ%x1] uint8'); 

% Initialisierung. Alle Spalten die nicht gesetzt werden haben keinen
% Einfluss.
Jg_C = zeros(6,%NJ%);

if link_index == 1
  % Die Gelenkwinkel haben keinen Einfluss auf die Basis
  return;
end

%% Kinematik berechnen
T_c_mdh = %RN%_fkine_fixb_rotmat_mdh_sym_varpar(qJ, ...
  alpha_mdh, a_mdh, d_mdh, q_offset_mdh, b_mdh, beta_mdh);
T_0_i = T_c_mdh(:,:,link_index);
R_0_i = t2r(T_0_i);
r_0_i_C = (R_0_i) * (r_i_i_C);

j = link_index;
for tmp = 1:%NJ%
  % Vorgänger-Index
  k = v_mdh(j-1); % Diese Indizes haben die Basis als 0.
  
  % Drehachse des Gelenks, das diesen Körper bewegt ist die z-Achse dieses
  % Körpers (bei DH-Notation ist es der vorherige, hier MDH-Notation).
  ax = T_c_mdh(1:3,3,j);
  jr = ax;
  
  % Vektor vom Gelenk zum Punkt
  r_0_j_i = -T_c_mdh(1:3,4,j) + T_0_i(1:3,4);
  r_0_j_C = r_0_j_i + r_0_i_C;
  
  % Hebelarm vom Gelenk zum Punkt
  jt = cross(ax, r_0_j_C);
  
  % Spalte der Jacobi-Matrix eintragen
  Jg_C(:,j-1) = [jt; jr];
  
  % Indizes tauschen: Kinematische Kette weiter Richtung Basis entlanggehen
  j = k+1; % Index mit Basis als 1
  if j == 1
    % An Basis angekommen
    return;
  end
end
