% Gelenk-Jacobimatrix zu beliebigen Punkten eines Körpers für
% %RN%
%
% Input:
% qJ [%NJ%x1]
%   Joint Angles [rad]
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: %RN%_fkine_fixb_rotmat_mdh_sym_varpar.m
% r_i_i_C [3x1]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% %INPUT_PKIN%
%
% Output:
% Jg_C [6x%NJ%]
%   geometric body jacobian for the defined point
%
% Quellen:
% [1] Ortmaier: Robotik I Skript

% %VERSIONINFO%
% Moritz Schappler, schappler@irt.uni-hannover.de, 2016-03
% (C) Institut für Regelungstechnik, Leibniz Universität Hannover

function Jg_C = %FN%(qJ, link_index, r_i_i_C, pkin)
%% Init
%#codegen
%#cgargs {zeros(%NQJ%,1),uint8(zeros(1,1)),zeros(3,1),zeros(%NKP%,1)}
assert(isreal(qJ) && all(size(qJ) == [%NJ% 1]), ...
  '%FN%: Joint angles qJ have to be [%NJ%x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
  '%FN%: link_index has to be [1x1] uint8');
assert(isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
  '%FN%: Position vector r_i_i_C has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [%NKP% 1]), ...
  '%FN%: Kinematic parameters pkin have to be [%NKP%x1] (double)');

if link_index > %NL%-1
  error('Index exceeds number of bodies');
end

% Initialisierung. Alle Spalten die nicht gesetzt werden haben keinen
% Einfluss.
Jg_C = zeros(6,%NJ%);

if link_index == 0
  % Die Gelenkwinkel haben keinen Einfluss auf die Basis
  return;
end

%% Kinematik berechnen
T_c_mdh = %RN%_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin);
v_mdh = %RN%_structural_kinematic_parameters();
T_0_i = T_c_mdh(:,:,link_index+1);
R_0_i = t2r(T_0_i);
r_0_i_C = (R_0_i) * (r_i_i_C);

j = link_index;
for tmp = 1:%NJ%
  % Vorgänger-Index
  k = v_mdh(j);

  % Drehachse des Gelenks, das diesen Körper bewegt ist die z-Achse dieses
  % Körpers (bei DH-Notation ist es der vorherige, hier MDH-Notation).
  ax = T_c_mdh(1:3,3,j+1);
  jr = ax;

  % Vektor vom Gelenk zum Punkt
  r_0_j_i = -T_c_mdh(1:3,4,j+1) + T_0_i(1:3,4);
  r_0_j_C = r_0_j_i + r_0_i_C;

  % Hebelarm vom Gelenk zum Punkt
  jt = cross(ax, r_0_j_C);

  % Spalte der Jacobi-Matrix eintragen
  Jg_C(:,j) = [jt; jr];

  % Indizes tauschen: Kinematische Kette weiter Richtung Basis entlanggehen
  j = k;
  if j == 0
    % An Basis angekommen
    return;
  end
end
