% Vektor der Dynamikkräfte der PKM-Plattform (für 6FG)
% 
% Eingabe:
% phi [3x1]
%   XYZ-Euler-Winkel des Plattform-KS
% xD [6x1]
%   Ableitung der Plattformkoordinaten (Geschwindigkeit und
%   Euler-Winkel-Ableitung)
% xDD [6x1]
%   2. Ableitung der Plattformkoordinaten (Beschleunigung und
%   2. Ableitung der Euler-Winkel)
% g [3x1]
%   Gravitationsvektor im Basis-KS
% m_num [1x1], rSges_num_mdh [1x3], Icges_num_mdh [1x6]
%   dynamic parameters (parameter set 1: center of mass and inertia about center of mass)
% 
% Ausgabe:
% tau [6x1]
%   Vektor der Invers-Dynamik-Kräfte (Kraft und Moment) im Basis-KS

% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2019-02
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = rigidbody_pkm_pf_invdyn_vp1(phi, xD, xDD, g, m_num, rSges_num_mdh, Icges_num_mdh)
%% Initialisierung
x_all = [zeros(3,1); phi];
Dx_all = xD;
DDx_all = xDD;

mE = m_num;

r_sP = rSges_num_mdh;

XX = Icges_num_mdh(1,1);
XY = Icges_num_mdh(1,4);
XZ = Icges_num_mdh(1,5);
YY = Icges_num_mdh(1,2);
YZ = Icges_num_mdh(1,6);
ZZ = Icges_num_mdh(1,3);

g1 = g(1);
g2 = g(2);
g3 = g(3);

%% Berechnung
% Aus invdyn_platform_eulxyz_matlab.m
t368 = x_all(4);
t350 = sin(t368);
t353 = cos(t368);
t428 = t350 * t353;
t493 = 0.2e1 * t428;
t370 = r_sP(2);
t371 = r_sP(1);
t458 = mE * t371;
t338 = (t370 * t458 - XY);
t482 = 2 * t338;
t369 = r_sP(3);
t337 = t369 * t458 - XZ;
t366 = x_all(6);
t348 = sin(t366);
t367 = x_all(5);
t352 = cos(t367);
t441 = t348 * t352;
t312 = t337 * t441;
t349 = sin(t367);
t351 = cos(t366);
t345 = t351 ^ 2;
t466 = -2 * t338;
t406 = t345 * t466;
t438 = t349 * t338;
t336 = mE * t369 * t370 - YZ;
t355 = t370 ^ 2;
t356 = t371 ^ 2;
t470 = (-t355 + t356) * mE - XX + YY;
t450 = t470 * t348;
t480 = (t336 * t352 - t349 * t450) * t351;
t277 = t349 * t406 + t312 + t438 + t480;
t347 = t353 ^ 2;
t346 = t352 ^ 2;
t344 = t346 - 0.2e1;
t436 = t349 * t352;
t399 = t337 * t436;
t447 = t338 * t348;
t451 = t470 * t345;
t464 = 0.2e1 * t351;
t354 = t369 ^ 2;
t476 = (-t354 + t355) * mE + ZZ - YY;
t490 = -0.2e1 * t336 * t441;
t477 = t476 * t346 + t349 * t490;
t488 = (-t344 * t447 + t399) * t464 + t344 * t451 + t470 + t477;
t492 = t277 * t493 - t488 * t347;
t365 = Dx_all(4);
t363 = Dx_all(6);
t434 = t349 * t363;
t327 = t365 + t434;
t364 = Dx_all(5);
t339 = t349 * t365;
t384 = t363 + 0.2e1 * t339;
t424 = t352 * t364;
t393 = t338 * t424;
t415 = t364 * t337;
t402 = t348 * t415;
t444 = t346 * t365;
t404 = t476 * t444;
t414 = t364 * t349;
t440 = t348 * t364;
t443 = t348 * t336;
t267 = (0.2e1 * t393 - (-0.2e1 * t327 + t444) * t470) * t345 + ((-t384 * t337 + t440 * t470) * t352 + t336 * t414 + (-0.4e1 * t434 + (0.2e1 * t346 - 0.4e1) * t365) * t447) * t351 - t404 + (-t338 * t364 + t384 * t443) * t352 + (-t363 * t470 + t402) * t349 - t365 * t470;
t321 = t364 * t476;
t416 = t363 * t348;
t395 = t337 * t416;
t295 = t321 + t395;
t289 = t295 * t349;
t394 = t338 * t440;
t448 = t336 * t363;
t303 = -0.2e1 * t394 + t448;
t294 = t303 * t349;
t474 = t339 + t363;
t479 = t474 * t348;
t379 = t470 * t479;
t403 = t470 * t424;
t382 = t349 * t403;
t296 = -t416 * t470 + 0.2e1 * t415;
t390 = t296 * t346 - t415;
t410 = t365 * t348;
t391 = t337 * t410;
t411 = t365 * t338;
t392 = t349 * t411;
t412 = t365 * t336;
t417 = t363 * t346;
t418 = t363 * t338;
t318 = t336 * t440;
t467 = 0.2e1 * t318;
t302 = t467 - t418;
t485 = -t302 * t346 + t318;
t491 = t267 * t428 - (((0.2e1 * t412 + t294) * t352 - t390 - 0.2e1 * t379) * t351 + (0.2e1 * t391 + t289) * t352 - (-t382 + (0.4e1 * t474 - 0.2e1 * t417) * t338) * t345 + 0.2e1 * t392 + 0.2e1 * t418 - t485) * t347;
t442 = t348 * t351;
t375 = t442 * t482 - t451;
t426 = t351 * t371;
t319 = t348 * t370 - t426;
t304 = t319 * t352 - t349 * t369;
t358 = DDx_all(5);
t486 = t304 * t358;
t320 = t348 * t371 + t351 * t370;
t341 = t352 * t369;
t388 = t349 * t319 + t341;
t280 = -t353 * t320 + t388 * t350;
t283 = t350 * t320 + t388 * t353;
t278 = -t303 * t351 - t364 * t451 - t295;
t481 = t278 * t353;
t449 = t336 * t351;
t475 = t338 + t406;
t465 = 0.2e1 * t345;
t469 = (t327 * t465 - t365) * t338 - (t296 * t349 - t410 * t470) * t351 + t302 * t349;
t306 = t337 * t351 - t443;
t468 = 0.2e1 * t306;
t360 = DDx_all(3);
t461 = mE * t360;
t361 = DDx_all(2);
t460 = mE * t361;
t362 = DDx_all(1);
t459 = mE * t362;
t329 = XX + mE * (t354 + t355);
t328 = YY + mE * (t354 + t356);
t456 = ZZ + mE * (t355 + t356);
t266 = (-0.2e1 * t480 - 0.2e1 * t312 + (0.4e1 * t345 - 0.2e1) * t438) * t347 - t488 * t428 + t277;
t455 = t266 * t350;
t454 = t266 * t353;
t453 = t266 * t365;
t446 = t345 * t363;
t445 = t346 * t350;
t437 = t349 * t350;
t435 = t349 * t353;
t433 = t349 * t370;
t432 = t349 * t371;
t430 = t350 * t470;
t429 = t350 * t352;
t427 = t350 * t365;
t425 = t352 * t353;
t423 = t353 * t306;
t421 = t353 * t470;
t420 = t353 * t338;
t419 = t353 * t365;
t413 = t364 * t369;
t409 = t365 * t352;
t300 = t318 - t418 / 0.2e1;
t378 = t392 + t418;
t408 = ((t382 / 0.2e1 + (-0.2e1 * t474 + t417) * t338) * t345 + (((-t394 + t448 / 0.2e1) * t349 + t412) * t352 + (-t346 + 0.1e1 / 0.2e1) * t415 - (-t417 / 0.2e1 + t474) * t450) * t351 + t300 * t346 + ((t395 / 0.2e1 + t321 / 0.2e1) * t349 + t391) * t352 - t318 / 0.2e1 + t378) * t493 + t267 * t347;
t407 = t365 * t468;
t398 = t338 * t437;
t397 = t349 * t420;
t389 = -t349 * t430 - 0.2e1 * t420;
t386 = t327 - t444;
t373 = (t327 * t370 - t371 * t424) * t351 + (t371 * t416 - t413) * t349 + t348 * (t365 * t371 + t370 * t424);
t359 = DDx_all(4);
t357 = DDx_all(6);
t323 = t339 + t363 / 0.2e1;
t308 = t350 * t414 - t353 * t409;
t307 = -t350 * t409 - t353 * t414;
t301 = t336 * t364 + t416 * t466;
t299 = t329 * t363 + t402;
t292 = -0.2e1 * t397 - t430;
t291 = 0.2e1 * t398 - t421;
t287 = t375 - t476;
t285 = -t369 * t409 - t370 * t479 + t426 * t474;
t284 = (t320 * t363 - t413) * t352 - t319 * t414;
t279 = t337 * t479 + t364 * t456 + t449 * t474;
t276 = t328 * t363 - t339 * t476 + t375 * t474;
t275 = t287 * t346 - 0.2e1 * t306 * t436 + t456;
t273 = t353 * t285 - t373 * t350;
t272 = t350 * t285 + t373 * t353;
t271 = (-t296 * t351 + t467 + (t465 - 0.1e1) * t418) * t346 - t278 * t436 + t306 * t364;
t270 = (-t287 * t435 + (-t442 * t470 + t475) * t350) * t352 - (t348 * t337 + t449) * t437 + (-0.2e1 * t346 + 0.1e1) * t423;
t269 = t445 * t468 + (t291 * t442 + t389 * t345 - t437 * t476 + t420) * t352 + (-t336 * t435 - t337 * t350) * t351 - t348 * (-t336 * t350 + t337 * t435);
t268 = t329 - t375 - t492;
t264 = -t451 + (t399 + (-t346 + 0.1e1) * t447) * t464 + t328 + t451 * t346 + t477 + t492;
t262 = -t346 * t481 + (t292 * t446 + (t296 * t435 - t350 * t301) * t351 - 0.2e1 * t300 * t435 - t350 * t299) * t352 + t364 * (t291 * t345 + t328 * t353 - t389 * t442 - t398);
t261 = t278 * t445 + (t291 * t446 + (-t296 * t437 - t353 * t301) * t351 + 0.2e1 * t300 * t437 - t353 * t299) * t352 - (t292 * t345 + (-t349 * t421 + t350 * t482) * t442 + t328 * t350 + t397) * t364;
t260 = (t350 * t407 - t481) * t346 + (t276 * t350 - t469 * t353) * t352 - t279 * t353 - t306 * t327 * t350;
t259 = (t278 * t350 + t353 * t407) * t346 + (t353 * t276 + t469 * t350) * t352 + t279 * t350 - t327 * t423;
t258 = t409 * t449 + t352 * t391 + (-t450 * t351 + t475) * t474 + t491;
t257 = -t386 * t451 + (t337 * t323 * t352 + t386 * t447) * t464 + t404 + t323 * t490 + t328 * t327 + t408;
t256 = (-t327 * t470 - 0.2e1 * t393) * t345 + (-t301 * t349 + (-t403 + 0.2e1 * t411) * t348) * t351 + t393 - t299 * t349 - t365 * t329 + t408;
t255 = (-t382 + (t474 - t417) * t482) * t345 + ((-t294 - t412) * t352 + t379 + t390) * t351 + (-t289 - t391) * t352 - t378 + t485 - t491;
t1 = [(t362 + (t280 * t350 + t283 * t353) * t358 + (t272 * t353 - t273 * t350 + t280 * t419 - t283 * t427) * t364 + (t280 * t307 + t283 * t308) * t363 - g1 + ((t280 * t353 - t283 * t350) * t357 + (-t272 * t350 - t273 * t353) * t363) * t352) * mE; (t361 - t283 * t359 - t350 * t486 + (-t283 * t349 - t304 * t425) * t357 - t272 * t365 + (-t284 * t350 - t304 * t419) * t364 + (-t272 * t349 - t283 * t424 - t284 * t425 - t304 * t307) * t363 - g2) * mE; (t360 - t280 * t359 + t353 * t486 + (-t280 * t349 - t304 * t429) * t357 + t273 * t365 + (t284 * t353 - t304 * t427) * t364 + (t273 * t349 - t280 * t424 - t284 * t429 + t304 * t308) * t363 - g3) * mE; -t283 * t460 - t280 * t461 + t275 * t359 + (t269 * t353 + t270 * t350) * t358 + (t275 * t349 + (-t269 * t350 + t270 * t353) * t352) * t357 + t271 * t365 + ((t270 * t365 + t261) * t353 + (-t269 * t365 + t262) * t350) * t364 + (t269 * t308 + t270 * t307 + t271 * t349 + (-t261 * t350 + t262 * t353 + t275 * t364) * t352) * t363 + mE * (((-g2 * t432 - g3 * t370) * t351 + g2 * t341) * t353 + ((g2 * t370 - g3 * t432) * t351 + g3 * t341) * t350 + ((g2 * t433 - g3 * t371) * t353 + (g2 * t371 + g3 * t433) * t350) * t348); t283 * t459 + t304 * t461 + t269 * t359 + (t264 * t353 + t455) * t358 + (t269 * t349 + (-t264 * t350 + t454) * t352) * t357 + t259 * t365 + ((t255 + t453) * t353 + (-t264 * t365 + t256) * t350) * t364 + (t259 * t349 + t264 * t308 + t266 * t307 + (-t255 * t350 + t256 * t353 + t269 * t364) * t352) * t363 - mE * (t283 * g1 + t304 * g3); t280 * t459 - t304 * t460 + t270 * t359 + (t268 * t350 + t454) * t358 + (t270 * t349 + (t268 * t353 - t455) * t352) * t357 + t260 * t365 + ((t268 * t365 + t257) * t353 + (t258 - t453) * t350) * t364 + (t260 * t349 + t266 * t308 + t268 * t307 + (-t257 * t350 + t258 * t353 + t270 * t364) * t352) * t363 + mE * (t304 * g2 + (-t350 * t341 + (t350 * t432 + t353 * t370) * t351 + (-t350 * t433 + t371 * t353) * t348) * g1);];

tau = t1;
