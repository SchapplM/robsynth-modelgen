% Test functions for parallel robot inverse dynamics from symbolic calculations
% Funktionen
% Endung "A": Kräfte und Momente sind auf die Antriebskoordinaten bezogen
% Endung "X": Auf Plattformkoordinaten bezogen


% %VERSIONINFO%

% Tim Job (Studienarbeit bei Moritz Schappler), 2018-12
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

clc
clear

NQJ = %NQJ_P%;
N_LEGS = %N_LEGS%; % number of legs
N_XP = %N_XP%; % number of platform DOF
robot_name = '%RN%';

%% Parameter
TSS = %RN%_varpar_testfunctions_parameter_par();
for f = fields(TSS)'
  eval(sprintf('%s=TSS.%s;',f{1},f{1}));
end

%% Test inverse dynamic
Q_GES = length(Q(1,:));
Q_N = Q_GES/NQJ;
for i = 1:n
  q = [];
  for j = 1:Q_N
    q = [q;Q(1,(j-1)*NQJ+1:j*NQJ)]; %#ok<AGROW>
  end
  q = q';
  xP = XP(i,:)';
  xPD = XPD(i,:)';
  xPDD = XPDD(i,:)';
  g = G(i,:)';
  
  %% Dynamik in Plattform-Koordinaten
  MmatX_vp1 = %RN%_inertia_para_pf_slag_vp1(xP, q, legFrame, ...
    koppelP, pkin, m, rSges, Icges);
  MmatX_vp2 = %RN%_inertia_para_pf_slag_vp2(xP, q, legFrame, ...
    koppelP, pkin, m, mrSges, Ifges);
	
  if any( abs(MmatX_vp1(:) - MmatX_vp2(:)) > 1e6*eps(1+max(abs(MmatX_vp1(:)))) )
    error('inertia matrices (platform coordinates) do not match between par1/par2.');
  end
  
  cvecX_vp1 = %RN%_coriolisvec_para_pf_slag_vp1(xP, xPD, q, legFrame, ...
    koppelP, pkin, m, rSges, Icges);
  cvecX_vp2 = %RN%_coriolisvec_para_pf_slag_vp2(xP, xPD, q, legFrame, ...
    koppelP, pkin, m, mrSges, Ifges);

  if any( abs(cvecX_vp1 - cvecX_vp2) > 1e6*eps(1+max(abs(cvecX_vp1))) )
    error('coriolis vectors (platform coordinates) do not match between par1/par2.');
  end
  
  gvecX_vp1 = %RN%_gravload_para_pf_slag_vp1(xP, q, g, legFrame,...
    koppelP, pkin, m, rSges);
  gvecX_vp2 = %RN%_gravload_para_pf_slag_vp2(xP, q, g, legFrame,...
    koppelP, pkin, m, mrSges);

  if any( abs(gvecX_vp1 - gvecX_vp2) > 1e6*eps(1+max(abs(gvecX_vp1))) )
    error('gravload vectors (platform coordinates) do not match between par1/par2.');
  end 
  
  tauX_vp1 = %RN%_invdyn_para_pf_slag_vp1(xP, xPD, xPDD, q, g, legFrame, ...
    koppelP, pkin, m, rSges, Icges);
  tauX_vp2 = %RN%_invdyn_para_pf_slag_vp2(xP, xPD, xPDD, q, g, legFrame, ...
    koppelP, pkin, m, mrSges, Ifges);

  if any( abs(tauX_vp1 - tauX_vp2) > 1e6*eps(1+max(abs(tauX_vp1))) )
    error('complete inverse dynamics (platform coordinates) do not match between par1/par2.');
  end 

  tauX_vp1_terme = MmatX_vp1*xPDD + cvecX_vp1 + gvecX_vp1;
  tauX_vp2_terme = MmatX_vp2*xPDD + cvecX_vp2 + gvecX_vp2;
  
  % compare both
  Delta = tauX_vp1_terme - tauX_vp1;
  if any(abs(Delta) > 1e6*eps(1+max(abs(tauX_vp1_terme))))
    error('Inverse dynamic does not match with inertia, coriolis, gravload components.')
  end
  
  Jinv = %RN%_Jinv(xP, q, pkin, koppelP, ...
    legFrame);

  
  %% Dynamik in Antriebskoordinaten
  if N_XP <= 4 && ~isempty(fileparts(which('%RN%_inertia_para_qa_slag_vp1')))
    % nur testen, falls Funktionen auch generiert wurden.
    MmatA_vp1 = %RN%_inertia_para_qa_slag_vp1(xP, q, legFrame, ...
      koppelP, pkin, m, rSges, Icges);
    MmatA_vp2 = %RN%_inertia_para_qa_slag_vp2(xP, q, legFrame, ...
      koppelP, pkin, m, mrSges, Ifges);

    if any( abs(MmatA_vp1(:) - MmatA_vp2(:)) > 1e6*eps(1+max(abs(MmatA_vp1(:)))) )
      error('inertia matrices (actuation coordinates) do not match between par1/par2.');
    end

    cvecA_vp1 = %RN%_coriolisvec_para_qa_slag_vp1(xP, xPD, q, legFrame, ...
      koppelP, pkin, m, rSges, Icges);
    cvecA_vp2 = %RN%_coriolisvec_para_qa_slag_vp2(xP, xPD, q, legFrame, ...
      koppelP, pkin, m, mrSges, Ifges);

    if any( abs(cvecA_vp1 - cvecA_vp2) > 1e6*eps(1+max(abs(cvecA_vp1))) )
      error('coriolis vectors (actuation coordinates) do not match between par1/par2.');
    end

    gvecA_vp1 = %RN%_gravload_para_qa_slag_vp1(xP, q, g, legFrame,...
      koppelP, pkin, m, rSges);
    gvecA_vp2 = %RN%_gravload_para_qa_slag_vp2(xP, q, g, legFrame,...
      koppelP, pkin, m, mrSges);

    if any( abs(gvecA_vp1 - gvecA_vp2) > 1e6*eps(1+max(abs(gvecA_vp1))) )
      error('gravload vectors (actuation coordinates) do not match between par1/par2.');
    end 
    tauA_vp1 = %RN%_invdyn_para_qa_slag_vp1(xP, xPD, xPDD, q, g, legFrame, ...
      koppelP, pkin, m, rSges, Icges);
    tauA_vp2 = %RN%_invdyn_para_qa_slag_vp2(xP, xPD, xPDD, q, g, legFrame, ...
      koppelP, pkin, m, mrSges, Ifges);

    if any( abs(tauA_vp1 - tauA_vp2) > 1e6*eps(1+max(abs(tauA_vp1))) )
      error('complete inverse dynamics (actuation coordinates) do not match between par1/par2.');
    end 
  else % if N_XP > 4
    % Dynamik in Antriebskoordinaten nicht symbolisch berechnet, da zu
    % viele Freiheitsgrade für symbolische Invertierung der Jacobi-Matrix.
    % Daher hier numerisch
    tauA_vp1  = (Jinv') \ tauX_vp1;
    gvecA_vp1 = (Jinv') \ gvecX_vp1;
    cvecA_vp1 = (Jinv') \ cvecX_vp1;
  end
  
  % Prüfe numerische Berechnung in Funktion
  tauAn_vp1 = %RN%_invdyn_para_qa_slagn_vp1(xP, xPD, xPDD, q, g, legFrame, ...
    koppelP, pkin, m, rSges, Icges);
  tauAn_vp2 = %RN%_invdyn_para_qa_slagn_vp2(xP, xPD, xPDD, q, g, legFrame, ...
    koppelP, pkin, m, mrSges, Ifges);
  if any( abs(tauA_vp1 - tauAn_vp1) > 1e6*eps(1+max(abs(tauAn_vp1))) )
    error('complete inverse dynamics (actuation coordinates) do not match between function and calculated here.');
  end 
  if any( abs(tauAn_vp1 - tauAn_vp2) > 1e6*eps(1+max(abs(tauAn_vp2))) )
    error('complete inverse dynamics (partly numeric; actuation coordinates) do not match between par1/par2.');
  end 
  
  %% Vergleiche Terme im Antriebskoordinaten mit Termen in Plattform-Koordinaten
  test_tauA = tauA_vp1 - (Jinv') \ tauX_vp1;
  test_tauX = tauX_vp1 - (Jinv') * tauA_vp1;
  if any( abs( test_tauA )  > 1e6*eps(1+max(abs([tauA_vp1;tauX_vp1]))) )
    error('Umrechnung der Dynamik von Plattform- zu Antriebskoordinaten stimmt nicht.');
  end
  if any( abs( test_tauX )  > 1e6*eps(1+max(abs([tauA_vp1;tauX_vp1]))) )
    error('Umrechnung der Dynamik von Antriebs- zu Plattformkoordinaten stimmt nicht.');
  end
end
fprintf('Tested inertia, coriolis, gravload components vs inverse dynamic for %d random joint angles for %s\n', ...
  n, robot_name);

