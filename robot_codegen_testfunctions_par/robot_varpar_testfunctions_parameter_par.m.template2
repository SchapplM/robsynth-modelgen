%% Dynamik-Parameter
rSges = rand(NQJ+1,3); % All center of mass coordinates in body frames
m = rand(NQJ+1,1); % masses of all links (are positive due to rand() function)
Ic_pa = rand(NQJ+1,3); % inertia of all links around their center of mass in principal axes
Icges = NaN(NQJ+1,6); % inertial of all links around their center of mass in body frame
for i = 1:NQJ+1
  R_pa = eulxyz2r(rand(3,1)); % random principal axes
  % inertia tensor in body frame: make sure the eigenvalues are positive and the tensor is positive definite
  Icges(i,:) = inertiamatrix2vector(R_pa*diag(Ic_pa(i,:))*R_pa');
end
% Parameter reduzieren, falls durch Benutzereingabe gefordert (für Beinkette und/oder Plattform).
% Notwendig, damit Dynamikmodell konsistent ist mit den Eingabeparametern
% Das betrifft nur die baryzentrischen Parameter (par1). 
[m,rSges,Icges] = %RN%_dynamics_parameters_modification(pkin,m,rSges,Icges);
% Die Inertialparameter (par2) werden daraus berechnet.
[mrSges, ... % first moment of all links (mass times center of mass)
 Ifges] = ... % second moment of all links (inertia around body frame origins)
  inertial_parameters_convert_par1_par2(rSges, Icges, m);


%% Set Outputs
TSS = struct('type', 'Test Settings Structure');
% Allgemeine Definitionen
TSS.G = G;
TSS.NQJ = NQJ;
TSS.NQJ_P = NQJ_P;
TSS.N_LEGS = N_LEGS;
TSS.N_XP = N_XP;
% Kinematikparameter
TSS.pkin = pkin;
% Dynamikparameter
TSS.m = m;
TSS.rSges = rSges;
TSS.Icges = Icges;
TSS.mrSges = mrSges;
TSS.Ifges = Ifges;
% Zufällige Konfigurationen für Modultests
TSS.n = n;
TSS.Q = Q;
TSS.XP = XP;
TSS.XPD = XPD;
TSS.XPDD = XPDD;
TSS.koppelP = koppelP;
TSS.legFrame = legFrame;
